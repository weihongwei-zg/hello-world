#面向对象的三大特性：封装，继承，多态
# 封装：
    # 1私有：(__变量名)  成员名前面加两个下划线即可，只能在当前类中访问
    # 2保护：（_变量名）成员名前面加一个下划线即可，只能在当前类和子类中访问
    # 3公有：正常的变量名


'''
类和对象都可以存储成员，成员可以归类所有，也可以归对象所有
类存储成员时使用的是与类关联的一个对象
独享存储成员是是存储在当前对象中
对象访问一个成员时，如果对象中没有该成员，尝试访问类中的同名成员，
   如果对象中有此成员，一定使用对象中的成员
创建对象的时候，类中的成员不会放入对象当中，而是得到一个空对象，没有成员
通过对象对类中成员重新赋值或者通过对象添加成员时，对应成员会保存在对象中，而不会修改类成员
关于self
self在对象的方法中表示当前对象本身，如果通过对象调用一个方法，那么该对象会自动传入到当前方法
的第一个参数中
self并不是关键字，只是一个用于接受对象的普通参数，理论上可以用任何一个普通变量名代替
方法中有self形参的方法成为非绑定类的方法，可以通过对象访问， 没有self的是绑定类的方法，
只能通过类访问
使用类访问绑定类的方法时， 如果类方法中需要访问当前类的成员，可以通过 __class__成员名来访问
'''

# 关于self的案例
class A():
    name = " liuying"
    age = 18

    def __init__(self):
        self.name = "aaaa"
        self.age = 200

    def say(s):
        print(s.name)
        print(s.age)
class B():
    name = "bbbb"
    age = 90
    def lp():
        print(__class__.age)
a = A()
# 此时，系统会默认把a作为第一个参数传入函数
a.say()
# 此时，self被a替换
A.say(a)
# 同样可以把A作为参数传入
A.say(A)
# 此时，传入的是类实例B，因为B具有name和age属性，所以不会报错
A.say(B)
print("*" * 50)
#私有化变量
class Person():
    name = "xiao"
    __p = 100
    def oop(self):
        print(self.__p)

o = Person()
o.oop()
#python中私有变量其实只是将变量改了一下名字，变量前面加上一个下划线加上类名，就是更改后的所谓私有变量
print(o._Person__p)
o._Person__p = 200
o.oop()
print(o._Person__p)
